[
   ~[x:GetDoThisForStudents]
   ~[x:SortSelection;Students:~[displayprefschool:report_card_sort]]
   ~[RepeatForEach:Students]
      {
      ~[tlist_sql;
         select
            s.id,
            case
                  when u.pei_uselegal = 1 then (scf.pscore_legal_first_name || ' ' || scf.pscore_legal_last_name) 
                  else (s.first_name || ' ' || s.last_name) 
                  end
            as student_name,
            s.student_number,
            pse.grade_level,
            case when pse.grade_level > 3 then 'true' else '' end as overGrade3,
            case when pse.grade_level > 4 then 'true' else '' end as overGrade4,
            case when pse.grade_level < 4 then 'true' else '' end as underGrade4,
            case
               when pse.grade_level=6 then 'À la fin de juin, on s''attend à ce que l''élève soit un lecteur avancé.'
               when pse.grade_level=5 then 'À la fin de juin, on s''attend à ce que l''élève soit un lecteur en début de voie d''autonomie.'
               when pse.grade_level=4 then 'À la fin de juin, on s''attend à ce que l''élève soit un lecteur en début de voie d''autonomie.'
               when pse.grade_level=3 then 'À la fin de juin, on s''attend à ce que l''élève soit un lecteur fin transition.'
               when pse.grade_level=2 then 'À la fin de juin, on s''attend à ce que l''élève soit un lecteur mi-transition.'
               when pse.grade_level=1 then 'À la fin de juin, on s''attend à ce que l''élève soit un lecteur fin débutant.'
               else 'NA'
            end as readingGoal,
            pse.schoolname,
            pse.principal,
            schext.schoolurl,
            pse.schoolid,
            to_char(1990+~(gpv.yearid)) || '-' || to_char(1991+~(gpv.yearid)) as yearname,
            ~[if#cotea.~(gpv.coteachers)=true]
               (Select
                  LISTAGG(t.first_name || ' ' || t.last_name, ', ') within group (order by st.roleid, st.start_date) 
                     FROM
                        sectionteacher st
                     JOIN teachers t
                        ON st.teacherid = t.id
                     where
                        st.roleid IN (41,42)
                        and cc.course_number like '%CT'
                           and st.sectionid = cc.sectionid)
            [else#cotea]
               (tea.first_name || ' ' || tea.last_name)
            [/if#cotea] as teachers,
            rpt.F_CONTINUUM_R1,
            rpt.F_CONTINUUM_R2,
            rpt.F_CONTINUUM_R3,
            rpt.F_FLA_R1_PROGRAM,
            rpt.F_FLA_R2_PROGRAM,
            rpt.F_FLA_R3_PROGRAM,
            rpt.F_MATH_R1_PROGRAM,
            rpt.F_MATH_R2_PROGRAM,
            rpt.F_MATH_R3_PROGRAM,
            rpt.F_ELA_R1_PROGRAM,
            rpt.F_ELA_R2_PROGRAM,
            rpt.F_ELA_R3_PROGRAM,
            case when pse.grade_level > 3 then substr(pfg1.comment_value,0,815) else pfg1.comment_value end as comment1,
            case when pse.grade_level > 3 then substr(pfg2.comment_value,0,815) else pfg2.comment_value end as comment2,
            case when pse.grade_level > 3 then substr(pfg3.comment_value,0,815) else pfg3.comment_value end as comment3
         from students s
         left join u_def_ext_students u
            on u.studentsdcid = s.dcid
         left join studentcorefields scf 
            on scf.studentsdcid = s.dcid
         left join u_def_ext_students0 rpt
            on s.dcid = rpt.studentsdcid
         join ps_schoolenrollment pse
            on s.id = pse.studentid and pse.yearid = ~(gpv.yearid)
         left join schools sch
            on sch.school_number = pse.schoolid
         left join u_dyn_schools_1 schext
            on schext.schoolsdcid = sch.dcid
         join cc 
            on cc.studentid = s.id and substr(cc.termid,1,2) = ~(gpv.yearid)
         join sections sec
            on sec.id = cc.sectionid
         join teachers tea
            on tea.id = sec.teacher
         left join pgfinalgrades pfg1
            on pfg1.sectionid = sec.id
            and pfg1.studentid = s.id
            and pfg1.finalgradename = 'E1'
         left join pgfinalgrades pfg2
            on pfg2.sectionid = sec.id
            and pfg2.studentid = s.id
            and pfg2.finalgradename = 'E2'
         left join pgfinalgrades pfg3
            on pfg3.sectionid = sec.id
            and pfg3.studentid = s.id
            and pfg3.finalgradename = 'E3'
         where
            s.id = ~(curstudid)
            ~[if.is.a.school]and s.schoolid = ~(curschoolid)[/if]
            and cc.course_number like '%CT'
            and pse.exitdate >= to_date('~(gpv.attcutoff)','mm/dd/yyyy')
            and pse.entrydate <= to_date('~(gpv.attcutoff)','mm/dd/yyyy')
            and pse.grade_level < 7]
     
         "sid":            "~(sid;l)",
         "studentName":    "~(stuName;json)",
         "studentNumber":  "~(stuNum;l)",
         "gradeLevel":    "~(grade_level;l)",
         "overGrade3":     "~(overGrade3)",
         "overGrade4":     "~(overGrade4)",
         "underGrade4":    "~(underGrade4)",
         "readingGoal":     "~(readingGoal;json)",
         "school": {    
            "name":        "~(schname;json)",
            "principal":   "~(principal;json)",
            "url":         "~(url;json)",
            "id":          "~(schid;l)"
         },
         "yearname":       "~(yearname;json)",
         "hr": {
            "teachers":  "~(hrTeachers;json)"
         },
         "continuum": {
            "E1":          "~(contE1;json)",
            "E2":          "~(contE2;json)",
            "E3":          "~(contE3;json)"
         },
         "progF": {
            "E1":          "~(progFE1;json)",
            "E2":          "~(progFE2;json)",
            "E3":          "~(progFE3;json)"
         },
         "progM": {
            "E1":          "~(progME1;json)",
            "E2":          "~(progME2;json)",
            "E3":          "~(progME3;json)"
         },
         "progA": {
            "E1":          "~(progAE1;json)",
            "E2":          "~(progAE2;json)",
            "E3":          "~(progAE3;json)"
         },
         "comments": {
            "E1":          "~(commentE1;json)",
            "E2":          "~(commentE2;json)",
            "E3":          "~(commentE3;json)"
         },
      [/tlist_sql]
      "grades": {
      ~[tlist_sql;
         with standards as (select
            substr(sec.course_number,2) course,
            st.identifier,
            sgs.storecode term,
            sgs.standardgrade grade
         from students s
         join standardgradesection sgs
            on sgs.studentsdcid = s.dcid
         left join sections sec
            on sec.dcid = sgs.sectionsdcid
         join standard st
            on st.standardid = sgs.standardid
         where
         s.id = ~(curstudid)
         and sgs.storecode in (~(gpv.terms))
         and sgs.yearid = ~(gpv.yearid))
   
         select *
         from standards
         PIVOT (
         MAX ( grade )
         FOR term
         IN ( 'E1' E1, 'E2' E2, 'E3' E3 ))
         order by course, identifier]
            "~(course)-~(identifier)": {
               "E1": "~(e1)",
               "E2": "~(e2)",
               "E3": "~(e3)"
            },
         [/tlist_sql]
            "null":"null"
         },
         "attendance": {
         ~[tlist_sql;
         SELECT 
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 9 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) SepAbs, 
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 10 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) OctAbs, 
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 11 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) NovAbs, 
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 12 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) DecAbs, 
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 1 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) JanAbs,  
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 2 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) FebAbs, 
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 3 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) MarAbs, 
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 4 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) AprAbs, 
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 5 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) MayAbs, 
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 6 AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) JunAbs,
            sum(CASE WHEN cal.date_value between(t.firstday+1) and t.lastday AND att.att_code IN ('AS','AI','AV','AE','AF','A','Z') THEN 0.5 else 0 END) TotalAbsences,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 9 AND att.att_code IN ('L','LF') THEN 1 else 0 END) SepLates,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 10 AND att.att_code IN ('L','LF') THEN 1 else 0 END) OctLates,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 11 AND att.att_code IN ('L','LF') THEN 1 else 0 END) NovLates,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 12 AND att.att_code IN ('L','LF') THEN 1 else 0 END) DecLates,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 1 AND att.att_code IN ('L','LF') THEN 1 else 0 END) JanLates,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 2 AND att.att_code IN ('L','LF') THEN 1 else 0 END) FebLates,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 3 AND att.att_code IN ('L','LF') THEN 1 else 0 END) MarLates,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 4 AND att.att_code IN ('L','LF') THEN 1 else 0 END) AprLates,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 5 AND att.att_code IN ('L','LF') THEN 1 else 0 END) MayLates,
            sum(CASE WHEN EXTRACT(MONTH FROM cal.date_value) = 6 AND att.att_code IN ('L','LF') THEN 1 else 0 END) JunLates,
            sum(CASE WHEN cal.date_value between (t.firstday+1) and t.lastday AND att.att_code IN ('L','LF') THEN 1 else 0 END) TotalLates
            from students s
            left join pssis_attendance_meeting att 
                on att.studentid = s.id 
            join calendar_day cal
                on att.Calendar_DayID = cal.id
            join cc
                on abs(att.ccid) = cc.id
            join terms t
                on abs(cc.termid) = t.id and cc.schoolid = t.schoolid
            where
                t.yearid = ~(gpv.yearid)
                and t.isyearrec = 1
                and cal.date_value between trunc(t.firstday+1) and least(trunc(t.lastday),to_date('~(gpv.attcutoff)','mm/dd/yyyy'))
                and s.id = ~(curstudid)
            group by s.id
            order by 1;]
          "absences": { 
            "sep": "~(SepAbs)",
            "oct": "~(OctAbs)",
            "nov": "~(NovAbs)",
            "dec": "~(DecAbs)",
            "jan": "~(JanAbs)",
            "feb": "~(FebAbs)",
            "mar": "~(MarAbs)",
            "apr": "~(AprAbs)",
            "may": "~(MayAbs)",
            "jun": "~(JunAbs)",
            "tot": "~(TotalAbs)"
           },
          "lates": {
           "sep": "~(SepLates)",
           "oct": "~(OctLates)",
           "nov": "~(NovLates)",
           "dec": "~(DecLates)",
           "jan": "~(JanLates)",
           "feb": "~(FebLates)",
           "mar": "~(MarLates)",
           "apr": "~(AprLates)",
           "may": "~(MayLates)",
           "jun": "~(JunLates)",
           "tot": "~(TotalLates)"
          }
          [/tlist_sql]
         }
      }
      [between:Students],
      [/RepeatForEach:Students] 
   ]