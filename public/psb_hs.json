[
   ~[x:GetDoThisForStudents]
   ~[x:SortSelection;Students:~[displayprefschool:report_card_sort]]
   ~[RepeatForEach:Students]
   {
   ~[tlist_sql;
      select
         s.id sid,
         s.schoolid schoolid,
         sch.name school,
         sch.principal,
         s.student_number,
         s.home_room,
         s.first_name,
         s.last_name,
         to_char(s.dob, 'mm/dd/yyyy') dob,
         s.grade_level
      from students s
      join schools sch
         on sch.school_number = s.schoolid
      where s.id = ~(curstudid)
      and s.schoolid = ~(curschoolid)
      order by sid;]
         "sid":            "~(sid)",
         "schoolid":       "~(schoolid)",
         "school":         "~(school)",
         "principal":      "~(principal)",
         "student_number": "~(student_number)",
         "home_room":      "~(home_room)",
         "first_name":     "~(first_name;json)",
         "last_name":      "~(last_name;json)",
         "dob":            "~(dob)",
         "grade_level":    "~(grade_level)",
      [/tlist_sql]
         "semCourses": [
      ~[tlist_sql;
            with currentcourses as (select
            cc.sectionid,
            sg.course_name,
            sg.course_number,
            case substr(sg.course_number,5,1)
               when '0' then 'Open'
               when '1' then 'Advanced'
               when '2' then 'Academic'
               when '3' then 'General'
               when '4' then 'Vocational'
               when '5' then 'Vocational'
               when '6' then 'Modified'
               when '7' then 'Intervention'     
            end as course_level,
            sg.absences,
            sg.tardies,
            sg.comment_value
      from students s
      join cc 
         on cc.studentid = s.id
      join storedgrades sg
         on sg.studentid = cc.studentid 
         and sg.sectionid = cc.sectionid
      where 
         s.id = ~(curstudid)
         and sg.schoolid = ~(curschoolid)
         and sg.termid = ~(gpv.termid)
         and sg.storecode in '~(gpv.storecode)'
         ),
         coursegrades as (select
            sg.sectionid,
            sg.storecode,
            sg.grade
         from storedgrades sg
         where sg.studentid = ~(curstudid)
         and sg.termid = ~(gpv.termid)
         ),
         gradespivot as (select *
         from coursegrades
         PIVOT (
         MAX ( grade )
         FOR storecode
         IN ( 'Q1' Q1, 'S1' S1, 'Q3' Q3, 'S2' S2 ))
         order by sectionid)
         select 
            ci.sectionid,
            ci.course_name,
            ci.course_number,
            ci.course_level,
            ci.absences,
            ci.tardies,
            ci.comment_value,
            cg.q1,
            cg.s1,
            cg.q3,
            cg.s2,
            ~[if.~(gpv.coteachers)=true](SELECT
            LISTAGG(t.first_name || ' ' || t.last_name, ', ') within group (order by st.start_date) as "Co-Teachers"
            FROM
               sectionteacher st
            JOIN teachers t
               ON st.teacherid = t.id
            where
               st.roleid IN (41,42)
               and st.sectionid = ci.sectionid)
            [else](tea.first_name || ' ' || tea.last_name)[/if] as teacher_names
         from currentcourses ci
         join gradespivot cg
            on ci.sectionid = cg.sectionid
         join sections sec
            on sec.id = ci.sectionid
         join teachers tea
            on tea.id = sec.teacher
         order by 1;]
         {
            "sectionid":"~(ci.sectionid)",
            "course_name":"~(ci.course_name;json)",
            "course_number":"~(ci.course_number;json)",
            "level":"~(ci.course_level)",
            "abs":"~(ci.absences)",
            "lates":"~(ci.tardies)",
            "comment":"~(ci.comment_value;json)",
            "q1":"~(cg.q1)",
            "s1":"~(cg.s1)",
            "q3":"~(cg.q3)",
            "s2":"~(cg.s2)",
            "teachers":"~(teacher_names;json)"
         },
         [/tlist_sql]
         {}],
         "fyCourses":[
            ~[tlist_sql;
            with currentcourses as (select
            cc.sectionid,
            sg.course_name,
            sg.course_number,
            case substr(sg.course_number,5,1)
               when '0' then 'Open'
               when '1' then 'Advanced'
               when '2' then 'Academic'
               when '3' then 'General'
               when '4' then 'Vocational'
               when '5' then 'Vocational'
               when '6' then 'Modified'
               when '7' then 'Intervention'     
            end as course_level,
            sg.absences,
            sg.tardies,
            sg.comment_value
      from students s
      join cc 
         on cc.studentid = s.id
      join storedgrades sg
         on sg.studentid = cc.studentid 
         and sg.sectionid = cc.sectionid
      where 
         s.id = ~(curstudid)
         and sg.schoolid = ~(curschoolid)
         and sg.termid = '~(gpv.yearid)00'
         and sg.storecode in ('Q1')
         ),
         coursegrades as (select
            sg.sectionid,
            sg.storecode,
            sg.grade
         from storedgrades sg
         where sg.studentid = ~(curstudid)
         and sg.termid = '~(gpv.yearid)00'
         ),
         gradespivot as (select *
         from coursegrades
         PIVOT (
         MAX ( grade )
         FOR storecode
         IN ( 'Q1' Q1, 'Q2' Q2, 'Q3' Q3, 'Q4' Q4 ))
         order by sectionid)

         select 
            ci.sectionid,
            ci.course_name,
            ci.course_number,
            ci.course_level,
            ci.absences,
            ci.tardies,
            ci.comment_value,
            cg.q1,
            cg.q2,
            cg.q3,
            cg.q4,
            ~[if.~(gpv.coteachers)=true](SELECT
            LISTAGG(t.first_name || ' ' || t.last_name, ', ') within group (order by st.start_date) as "Co-Teachers"
            FROM
               sectionteacher st
            JOIN teachers t
               ON st.teacherid = t.id
            where
               st.roleid IN (41,42)
               and st.sectionid = ci.sectionid)
            [else](tea.first_name || ' ' || tea.last_name)[/if] as teacher_names
         from currentcourses ci
         join gradespivot cg
            on ci.sectionid = cg.sectionid
         join sections sec
            on sec.id = ci.sectionid
         join teachers tea
            on tea.id = sec.teacher
         order by 1;]
            {
               "sectionid":"~(ci.sectionid)",
               "course_name":"~(ci.course_name;json)",
               "course_number":"~(ci.course_number)",
               "level":"~(ci.course_level)",
               "abs":"~(ci.absences)",
               "lates":"~(ci.tardies)",
               "comment":"~(ci.comment_value;json)",
               "q1":"~(cg.q1)",
               "q2":"~(cg.q2)",
               "q3":"~(cg.q3)",
               "q4":"~(cg.q4)",
               "teachers":"~(teacher_names;json)"
            },
            [/tlist_sql]
            {}]
   }
   [between:Students],
   [/RepeatForEach:Students] 
]